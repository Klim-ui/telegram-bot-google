import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
import aiosqlite
from gdrive_service import GoogleDriveService
from ai_service import AIService

load_dotenv("config.env")
TOKEN = os.getenv("TELEGRAM_TOKEN")

ALLOWED_USERS = set()  # –ë—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–∑ –ë–î
DB_PATH = "users.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
gdrive_service = GoogleDriveService()
ai_service = AIService()

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                tg_id INTEGER UNIQUE,
                name TEXT,
                department TEXT,
                role TEXT
            )
        """)
        await db.commit()
        # –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–∏–º –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID)
        await db.execute("INSERT OR IGNORE INTO users (tg_id, name, department, role) VALUES (?, ?, ?, ?)",
                         (123456789, "Admin", "IT", "admin"))
        await db.commit()
        async with db.execute("SELECT tg_id FROM users") as cursor:
            async for row in cursor:
                ALLOWED_USERS.add(row[0])

async def is_authorized(user_id: int) -> bool:
    return user_id in ALLOWED_USERS

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    if not await is_authorized(message.from_user.id):
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await message.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.\n\n"
                        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                        "/docs ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
                        "/search ‚Äî –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º\n"
                        "/myid ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    if not await is_authorized(message.from_user.id):
        return
    await message.answer("üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
                        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                        "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                        "/docs ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
                        "/search ‚Äî –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º (–Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å)\n"
                        "/myid ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID\n\n"
                        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö!")

@dp.message(Command("myid"))
async def cmd_myid(message: Message):
    await message.answer(f"–¢–≤–æ–π Telegram ID: {message.from_user.id}")

@dp.message(Command("docs"))
async def cmd_docs(message: Message):
    if not await is_authorized(message.from_user.id):
        return
    
    try:
        await message.answer("üìö –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        documents = gdrive_service.get_documents()
        
        if not documents:
            await message.answer("üì≠ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Drive.")
            return
        
        docs_list = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n"
        for i, doc in enumerate(documents[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            docs_list += f"{i}. {doc['name']}\n"
            docs_list += f"   –¢–∏–ø: {doc['mimeType']}\n"
            docs_list += f"   –°—Å—ã–ª–∫–∞: {doc['webViewLink']}\n\n"
        
        if len(documents) > 10:
            docs_list += f"... –∏ –µ—â–µ {len(documents) - 10} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        
        await message.answer(docs_list)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")

@dp.message(Command("search"))
async def cmd_search(message: Message):
    if not await is_authorized(message.from_user.id):
        return
    
    await message.answer("üîç –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö!\n\n"
                        "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
                        "‚Ä¢ –ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–ø—É—Å–∫?\n"
                        "‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è?\n"
                        "‚Ä¢ –ì–¥–µ –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞?")

@dp.message()
async def handle_search_query(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if not await is_authorized(message.from_user.id):
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return
    
    try:
        await message.answer("üîç –ò—â—É –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        documents = gdrive_service.get_documents()
        
        if not documents:
            await message.answer("üì≠ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs_with_content = []
        for doc in documents[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            content = gdrive_service.get_document_content(doc['id'], doc['mimeType'])
            docs_with_content.append({
                'name': doc['name'],
                'content': content,
                'link': doc['webViewLink']
            })
        
        # –ò—â–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
        response = ai_service.search_documents(message.text, docs_with_content)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        answer = f"ü§ñ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{response}\n\n"
        answer += "üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
        for doc in docs_with_content:
            answer += f"‚Ä¢ {doc['name']}: {doc['link']}\n"
        
        await message.answer(answer)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

async def main():
    await init_db()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 